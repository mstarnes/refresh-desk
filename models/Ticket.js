const mongoose = require('mongoose');

const CcEmailSchema = new mongoose.Schema({
  cc_emails: { type: [String], default: [] },
  fwd_emails: { type: [String], default: [] },
  reply_cc: { type: [String], default: [] },
  tkt_cc: { type: [String], default: [] },
});

const RequesterSchema = new mongoose.Schema({
  id: { type: Number, required: true },
  name: { type: String },
  email: { type: String },
  created_at: { type: String },
  updated_at: { type: String },
  account_id: { type: Number },
  active: { type: Boolean },
  customer_id: { type: Number },
  job_title: { type: String },
  phone: { type: String },
  mobile: { type: String },
  twitter_id: { type: String },
  description: { type: String },
  time_zone: { type: String },
  deleted: { type: Boolean },
  fb_profile_id: { type: String, default: null },
  language: { type: String },
  address: { type: String },
  external_id: { type: String, default: null },
  helpdesk_agent: { type: Boolean },
  unique_external_id: { type: String, default: null },
  company_id: { type: Number },
});

const ConversationSchema = new mongoose.Schema({
  id: { type: Number, required: true },
  body_text: { type: String },
  user_id: { type: Number },
  source: { type: Number },
  incoming: { type: Boolean },
  private: { type: Boolean },
  created_at: { type: String },
  updated_at: { type: String },
  deleted: { type: Boolean },
  notable_id: { type: Number },
  notable_type: { type: String },
  account_id: { type: Number },
  body: { type: String },
  support_email: { type: String },
  attachments: { type: [Object], default: [] },
});

const ReportsDataSchema = new mongoose.Schema({
  first_assign_by_bhrs: { type: Number, default: null },
  first_response_id: { type: Number, default: null },
  first_response_group_id: { type: Number, default: null },
  first_response_agent_id: { type: Number, default: null },
  first_assign_agent_id: { type: Number, default: null },
  first_assign_group_id: { type: Number, default: null },
  agent_reassigned_count: { type: Number, default: null },
  group_reassigned_count: { type: Number, default: null },
  reopened_count: { type: Number },
  private_note_count: { type: Number, default: null },
  public_note_count: { type: Number, default: null },
  agent_reply_count: { type: Number },
  customer_reply_count: { type: Number },
  agent_assigned_flag: { type: Boolean, default: null },
  agent_reassigned_flag: { type: Boolean, default: null },
  group_assigned_flag: { type: Boolean, default: null },
  group_reassigned_flag: { type: Boolean, default: null },
  internal_agent_assigned_flag: { type: Boolean, default: null },
  internal_agent_reassigned_flag: { type: Boolean, default: null },
  internal_group_assigned_flag: { type: Boolean, default: null },
  internal_group_reassigned_flag: { type: Boolean, default: null },
  internal_agent_first_assign_in_bhrs: { type: Number, default: null },
  last_resolved_at: { type: String, default: null },
  initial_sentiment: { type: String, default: null },
  archive: { type: Boolean },
  resolution_escalation_level: { type: Number, default: null },
  response_reminded: { type: Boolean },
  resolution_reminded: { type: Boolean },
  time_to_resolution_in_chrs: { type: Number },
  outbound_email: { type: Boolean },
  watchers: { type: [String], default: [] },
  group_users: { type: [String], default: [] },
  on_state_time: { type: String, default: null },
  source_additional_info: { type: Object },
  status_stop_sla_timer: { type: Boolean },
  status_deleted: { type: Boolean },
});

const TicketStatesSchema = new mongoose.Schema({
  ticket_id: { type: Number, required: true },
  opened_at: { type: String },
  pending_since: { type: String, default: null },
  resolved_at: { type: String },
  closed_at: { type: String },
  first_assigned_at: { type: String },
  assigned_at: { type: String },
  first_response_time: { type: String },
  requester_responded_at: { type: String },
  agent_responded_at: { type: String },
  created_at: { type: String },
  updated_at: { type: String },
  group_escalated: { type: Boolean },
  inbound_count: { type: Number },
  status_updated_at: { type: String },
  sla_timer_stopped_at: { type: String },
  outbound_count: { type: Number },
  avg_response_time: { type: Number },
  first_resp_time_by_bhrs: { type: Number },
  resolution_time_by_bhrs: { type: Number },
  avg_response_time_by_bhrs: { type: Number },
  resolution_time_updated_at: { type: String, default: null },
});

const TicketSchema = new mongoose.Schema({
  id: { type: Number, required: true, unique: true },
  description: { type: String },
  requester_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }, // Updated
  responder_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Agent' },
  status: { type: Number },
  urgent: { type: Boolean },
  source: { type: Number },
  spam: { type: Boolean },
  deleted: { type: Boolean },
  created_at: { type: String },
  updated_at: { type: String },
  trained: { type: Boolean },
  account_id: { type: Number },
  subject: { type: String },
  display_id: { type: Number },
  owner_id: { type: Number },
  group_id: { type: Number, default: null },
  due_by: { type: String },
  frDueBy: { type: String },
  isescalated: { type: Boolean },
  priority: { type: Number },
  fr_escalated: { type: Boolean },
  to_email: { type: String },
  email_config_id: { type: Number },
  cc_email: CcEmailSchema,
  delta: { type: Boolean },
  ticket_type: { type: String, default: null },
  description_html: { type: String },
  parent_ticket_id: { type: Number, default: null },
  dirty: { type: Number },
  sl_product_id: { type: String, default: null },
  sl_sla_policy_id: { type: String, default: null },
  sl_merge_parent_ticket: { type: String, default: null },
  sl_skill_id: { type: String, default: null },
  st_survey_rating: { type: String, default: null },
  sl_escalation_level: { type: String, default: null },
  sl_manual_dueby: { type: String, default: null },
  internal_group_id: { type: String, default: null },
  internal_agent_id: { type: String, default: null },
  association_type: { type: String, default: null },
  associates_rdb: { type: String, default: null },
  sla_state: { type: Number },
  nr_due_by: { type: String, default: null },
  nr_reminded: { type: String, default: null },
  nr_escalated: { type: String, default: null },
  int_tc01: { type: String, default: null },
  int_tc02: { type: String, default: null },
  int_tc03: { type: String, default: null },
  int_tc04: { type: String, default: null },
  int_tc05: { type: String, default: null },
  long_tc01: { type: String, default: null },
  long_tc02: { type: String, default: null },
  long_tc03: { type: String, default: null },
  long_tc04: { type: String, default: null },
  long_tc05: { type: String, default: null },
  datetime_tc01: { type: String, default: null },
  datetime_tc02: { type: String, default: null },
  datetime_tc03: { type: String, default: null },
  json_tc01: { type: String, default: null },
  status_name: { type: String },
  requester_status_name: { type: String },
  priority_name: { type: String },
  source_name: { type: String },
  requester_name: { type: String },
  responder_name: { type: String },
  product_id: { type: String, default: null },
  to_emails: { type: [String] },
  reports_data: ReportsDataSchema,
  custom_field: { type: Object, default: {} },
  tags: [{ type: mongoose.Schema.Types.Mixed }],
  attachments: { type: [Object], default: [] },
  ticket_states: TicketStatesSchema,
  requester: RequesterSchema,
  conversations: [ConversationSchema],
  company_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Company' },
});

// Add index on display_id
TicketSchema.index({ display_id: 1 }, { unique: true });

module.exports = mongoose.model('Ticket', TicketSchema);